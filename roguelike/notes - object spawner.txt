UI Changes:

theme.lua

  --Text                                        =           { 1.00, 0.38, 0.33, 1.00 },
  Text                                        =           { 1.00, 0.76, 0.66, 1.00 },   -- the spawn new listbox uses this as the foreground color of each item (pretty much all text is this though)

  --Button                                      =           { 0.57, 0.17, 0.16, 1.00 },
  Button                                      =           { 0.57, 0.17, 0.16, 0.20 },   -- the spawn new listbox items are actually buttons, so this is much more transparent

  --TitleBgCollapsed                            =           { 0.06, 0.04, 0.06, 0.90 },
  TitleBgCollapsed                            =           { 0.06, 0.04, 0.06, 0.30 },


spawnUI.lua


    local _, wHeight = GetDisplayResolution()

    local maxHeight = wHeight - 150
    if wHeight > 1080 then
        --maxHeight = wHeight * 0.5
        maxHeight = 1080 - 150
    end

    --ImGui.BeginChild("list", spawnUI.sizeX, wHeight - 150)
    ImGui.BeginChild("list", spawnUI.sizeX, maxHeight)



-------------------------------

NOTE: WorldFunctionalTests.SpawnEntity is obsolete, use exEntitySpawner.Spawn



Spawning:

spawnedUI.lua

local obj = spawner.baseUI.spawnedUI.spawnNewObject(p.path, parent)

...

function spawnedUI.spawnNewObject(path, parent)
    local new = object:new(spawnedUI)
    new.path = path
    new.name = path
    new.rot = GetSingleton('Quaternion'):ToEulerAngles(Game.GetPlayer():GetWorldOrientation())
    new.pos = Game.GetPlayer():GetWorldPosition()
    new.parent = parent

    if parent ~= nil then
        table.insert(new.parent.childs, new)
    end

    if spawnedUI.spawner.settings.spawnPos == 2 then
        local vec = Game.GetPlayer():GetWorldForward()
        new.pos.x = new.pos.x + vec.x * spawnedUI.spawner.settings.spawnDist
        new.pos.y = new.pos.y + vec.y * spawnedUI.spawner.settings.spawnDist
    end

    new:generateName()
    new:spawn()
    table.insert(spawnedUI.elements, new)

    return new
end

...

function object:spawn()
    local transform = Game.GetPlayer():GetWorldTransform()
    transform:SetOrientation(GetSingleton('EulerAngles'):ToQuat(self.rot))
    transform:SetPosition(self.pos)
    self.entID = WorldFunctionalTests.SpawnEntity(self.path, transform, '')
    self.entity = Game.FindEntityByID(self.entID)
    self.spawned = true
end